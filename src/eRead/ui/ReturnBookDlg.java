
package eRead.ui;

import eRead.db.BookDAO;
import eRead.db.Issue2DAO;
import eRead.db.IssueDAO;
import eRead.db.UserDAO;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;


public class ReturnBookDlg extends javax.swing.JDialog {

    /**
     * Creates new form ReturnBookDlg
     */
    public ReturnBookDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    ReturnBookDlg() {
        initComponents();
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        bSubmit = new javax.swing.JButton();
        tBookId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tStudentId = new javax.swing.JTextField();
        bFine = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(153, 153, 0));
        jPanel1.setLayout(null);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Return Book");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(180, 20, 148, 30);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 510, 70);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Book ID :");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(150, 160, 100, 30);

        bSubmit.setText("RETURN");
        bSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSubmitActionPerformed(evt);
            }
        });
        getContentPane().add(bSubmit);
        bSubmit.setBounds(140, 330, 100, 30);
        getContentPane().add(tBookId);
        tBookId.setBounds(330, 160, 130, 30);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Student Id :");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(150, 220, 100, 30);
        getContentPane().add(tStudentId);
        tStudentId.setBounds(330, 220, 130, 30);

        bFine.setText("FINE ");
        bFine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bFineActionPerformed(evt);
            }
        });
        getContentPane().add(bFine);
        bFine.setBounds(330, 330, 110, 30);

        jButton1.setText("Home");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(410, 80, 90, 23);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eRead/ui/return.jpg"))); // NOI18N
        getContentPane().add(jLabel4);
        jLabel4.setBounds(0, 60, 510, 360);

        setSize(new java.awt.Dimension(526, 453));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void bSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSubmitActionPerformed
        // TODO add your handling code here:
        String bookId , studentId;
        bookId = tBookId.getText();
        studentId = tStudentId.getText();
        try
        {
         if(IssueDAO.checkReturn(studentId, bookId))
         { 
           
            long millis = System.currentTimeMillis();
            java.sql.Date current;
             current = new java.sql.Date(millis);
            String currents = current.toString();
            SimpleDateFormat myFormat = new SimpleDateFormat("yyyy-MM-dd");
            String issueDate = Issue2DAO.fineIssueDay(bookId , studentId); 
            String returnDate = Issue2DAO.fineReturnDay(bookId , studentId);
           
            java.util.Date dateBefore = myFormat.parse(issueDate);
            java.util.Date dateAfter = myFormat.parse(currents);
            long difference = dateAfter.getTime() - dateBefore.getTime();
            float daysBetween = (difference / (1000*60*60*24));
            
            System.out.println("Number of Days between dates: "+daysBetween);
               
            if(daysBetween>14)
            {
                 double fine = daysBetween-14.0;
                 javax.swing.JOptionPane.showMessageDialog(this,"Fine Amount is = "+ fine +"\n   Book Returned");  
                 tBookId.setText("");
                 tStudentId.setText("");
            }
             else
            {    
                   
                javax.swing.JOptionPane.showMessageDialog(this,"Fine Amount is = 0.0 \n   Book Returned");
                tBookId.setText("");
                tStudentId.setText("");
            }
                    
            IssueDAO.returnBook(bookId, studentId);
            Issue2DAO.returnBook(bookId, studentId);
            String stock = BookDAO.checkStock(bookId);
                    
            if(UserDAO.checkUserId(studentId))
            {    
                
                    
                    int newStock = Integer.parseInt(stock) +1 ;
                    BookDAO.updateBook(bookId, Integer.toString(newStock));
                    BookDAO.updateStatus(bookId, "Available");
                    
                
            }
            else
            {
                javax.swing.JOptionPane.showMessageDialog(this, "Invalid Student Id");
                tBookId.setText("");
                tStudentId.setText("");
            }    
         }
         else
         {
            javax.swing.JOptionPane.showMessageDialog(this, "Invalid book Id or student id"); 
            tBookId.setText("");
            tStudentId.setText("");
         }    
        }
        catch(Exception ex)
        {
           //ex.printStackTrace();
        }
    }//GEN-LAST:event_bSubmitActionPerformed

    private void bFineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bFineActionPerformed
        // TODO add your handling code here:
        String bookId , studentId;
        bookId = tBookId.getText();
        studentId = tStudentId.getText();
        
        try
        {
           long millis = System.currentTimeMillis();
           java.sql.Date current;
           current = new java.sql.Date(millis);
           String currents = current.toString();
           SimpleDateFormat myFormat = new SimpleDateFormat("yyyy-MM-dd");
           String issueDate = Issue2DAO.fineIssueDay(bookId , studentId); 
           String returnDate = Issue2DAO.fineReturnDay(bookId , studentId);
           
           java.util.Date dateBefore = myFormat.parse(issueDate);
	   java.util.Date dateAfter = myFormat.parse(currents);
	   long difference = dateAfter.getTime() - dateBefore.getTime();
	   float daysBetween = (difference / (1000*60*60*24));
               /* You can also convert the milliseconds to days using this method
                * float daysBetween = 
                *         TimeUnit.DAYS.convert(difference, TimeUnit.MILLISECONDS)
                */
	       System.out.println("Number of Days between dates: "+daysBetween);
               
               if(daysBetween>14)
               {
                   double fine = daysBetween-14.0;
                 javax.swing.JOptionPane.showMessageDialog(this,"Fine Amount is = "+ fine);  
               }
               else
                   
               javax.swing.JOptionPane.showMessageDialog(this,"Fine Amount is = 0.0");
               
           
           
        
         
          
          
          
        }
        catch(Exception e)
        {
         javax.swing.JOptionPane.showMessageDialog(this,"Invalid student id or book id");
         tBookId.setText("");
         tStudentId.setText("");
        }
        
        
    }//GEN-LAST:event_bFineActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        LibrarianDlg dl = new LibrarianDlg();
        dl.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReturnBookDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReturnBookDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReturnBookDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReturnBookDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ReturnBookDlg dialog = new ReturnBookDlg(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bFine;
    private javax.swing.JButton bSubmit;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField tBookId;
    private javax.swing.JTextField tStudentId;
    // End of variables declaration//GEN-END:variables
}
